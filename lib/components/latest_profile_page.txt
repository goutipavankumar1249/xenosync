import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:image_picker/image_picker.dart';
import 'package:login_app/components/EditProfilePage.dart';
import 'package:login_app/components/UploadImagesPage.dart';
import 'package:login_app/components/verify/UserVerificationPage.dart';
import 'dart:io';
import 'package:provider/provider.dart';
import 'package:video_player/video_player.dart';
import 'UserState.dart';
import 'VideoWidget.dart';

class ProfilePage extends StatefulWidget {
  const ProfilePage({Key? key}) : super(key: key);

  @override
  _ProfilePageState createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  File? _imageFile;
  String? fullName;
  String? dateOfBirth;
  String? location;
  String? instagramHandle;
  String? phoneNumber;
  String? bio;
  String? imageUrl;

  final ImagePicker _picker = ImagePicker();
  final FirebaseFirestore firestore = FirebaseFirestore.instance;

  Future<void> _pickImage() async {
    final pickedFile = await _picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _imageFile = File(pickedFile.path);
      });
    }
  }

  Future<Map<String, dynamic>> _fetchProfileData(String userId) async {
    try {
      final bioSnapshot = await firestore
          .collection('users')
          .doc(userId)
          .collection('intrest')
          .doc('narrowinfluencer')
          .get();

      final data = bioSnapshot.data();
      bio = data?['bio'];

      final userDoc = await firestore
          .collection('users')
          .doc(userId)
          .collection('intrest')
          .doc('basic details')
          .get();
      if (userDoc.exists) {
        return userDoc.data() ?? {};
      } else {
        return {};
      }
    } catch (e) {
      print("Error fetching profile data: $e");
      return {};
    }
  }

  // Future<List<Object>> _fetchUserPosts(String userId) async {
  //   try {
  //     final querySnapshot = await firestore
  //         .collection('users')
  //         .doc(userId)
  //         .collection('feed')
  //         .get();
  //
  //     return querySnapshot.docs.map((doc) {
  //       final data = doc.data() as Map<String, dynamic>; // Ensure type safety
  //       return {
  //         'url': data['mediaUrl'] ?? '',   // Media file URL (image/video)
  //         'type': data['mediaType'] ?? '', // Type: "image" or "video"
  //       };
  //     }).toList();
  //   } catch (e) {
  //     print("Error fetching user posts: $e");
  //     return [];
  //   }
  // }

  Future<List<Map<String, String>>> _fetchUserPosts(String userId) async {
    final querySnapshot = await firestore
          .collection('users')
          .doc(userId)
          .collection('feed')
          .get();

    return querySnapshot.docs.map((doc) {
      final data = doc.data();

      return {
        'url': data?['imageUrl'] != null ? data['imageUrl'].toString() : '',
        'type': data?['type'] != null ? data['type'].toString() : '',
      };
    }).toList();
  }

  Future<bool> isVerified(String userId) async {
    try {
      DocumentSnapshot doc = await FirebaseFirestore.instance.collection('users').doc(userId).get();

      // Ensure document exists
      if (!doc.exists) return false;

      // Check if the 'verifiedAccount' field exists, return false if missing
      Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
      return data.containsKey('verifiedAccount') ? (data['verifiedAccount'] as bool) : false;
    } catch (e) {
      print("Error fetching verification status: $e");
      return false; // Return false if there's an error
    }
  }




  Future<void> boostProfile(String userId) async {
    final boostDuration = Duration(hours: 24); // Boost for 24 hours
    final boostedUntil = Timestamp.fromDate(DateTime.now().add(boostDuration));

    await FirebaseFirestore.instance.collection('users').doc(userId).update({
      'boostedUntil': boostedUntil,
    });
  }


  @override
  Widget build(BuildContext context) {
   String userId = Provider.of<UserState>(context).userId;
    return Scaffold(
      body: FutureBuilder<Map<String, dynamic>>(
        future: _fetchProfileData(userId),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          if (snapshot.hasData) {
            final profileData = snapshot.data!;
            fullName = profileData['full_name'] ?? "Unknown";
            dateOfBirth = profileData['date_of_birth'] ?? "Not specified";
            location = profileData['location'] ?? "Not specified";
            instagramHandle = profileData['instagram_handle'] ?? "Not specified";
            phoneNumber = profileData['phone_number'] ?? "Not specified";
            imageUrl = profileData['image_url'];

            return SingleChildScrollView(
              padding: const EdgeInsets.all(20.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Section 1: Profile Image and Name
                  Row(
                    children: [
                      // Profile Image
                      GestureDetector(
                        onTap: _pickImage,
                        child: CircleAvatar(
                          radius: 50,
                          backgroundColor: Colors.blue.shade100,
                          backgroundImage: _imageFile != null
                              ? FileImage(_imageFile!)
                              : (imageUrl != null
                              ? NetworkImage(imageUrl!)
                              : null) as ImageProvider?,
                          child: _imageFile == null && imageUrl == null
                              ? const Icon(Icons.camera_alt, size: 40)
                              : null,
                        ),
                      ),
                      const SizedBox(width: 15),
                      // Name and Verified Tag
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Text(
                        fullName!,
                        style: const TextStyle(
                          fontFamily: 'Montserrat',
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(width: 5),
                      FutureBuilder<bool>(
                        future: isVerified(userId),
                        builder: (context, snapshot) {
                          if (snapshot.connectionState == ConnectionState.waiting) {
                            return const CircularProgressIndicator();
                          }

                          if (snapshot.hasError || !snapshot.hasData) {
                            return const Text("Unverified"); // If error or no data, show 'Unverified'
                          }

                          bool verified = snapshot.data ?? false;

                          return Container(
                            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                            decoration: BoxDecoration(
                              color: verified ? const Color(0xFFB9DDFF) : Colors.redAccent,
                              borderRadius: const BorderRadius.all(Radius.circular(4)),
                            ),
                            child: Text(
                              verified ? 'Verified' : 'Unverified',
                              style: const TextStyle(
                                fontFamily: 'Montserrat',
                                fontSize: 10,
                                fontWeight: FontWeight.w400,
                                color: Colors.black,
                              ),
                            ),
                          );
                        },
                      ),


                    ],
                  ),
                  const SizedBox(height: 8),

                  // Verify Now Button
                  SizedBox(
                    width: 163,
                    height: 32,
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => UserVerificationPage(userId: userId,),
                          ),
                        );
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF1E88E5), // Same as Edit Profile button
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                      ),
                      child: const Text(
                        "Verify Now",
                        style: TextStyle(
                          fontFamily: 'Montserrat',
                          fontSize: 12,
                          fontWeight: FontWeight.w600,
                          color: Colors.white,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),

                  // Golden Boost Button
                  Container(
                    width: 163,
                    height: 32,
                    decoration: BoxDecoration(
                      gradient: const LinearGradient(
                        colors: [Color(0xFFFFD700), Color(0xFFD4AF37)], // Golden gradient
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(8),
                      boxShadow: const [
                        BoxShadow(
                          color: Color(0x80FFD700), // Golden shadow
                          blurRadius: 10,
                          spreadRadius: 2,
                          offset: Offset(0, 4),
                        ),
                      ],
                    ),
                    child: ElevatedButton(
                      onPressed: () {
                        boostProfile(userId); // Calling the function when clicked
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.transparent,
                        shadowColor: Colors.transparent,
                        padding: EdgeInsets.zero,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const Text(
                            "Boost Profile",
                            style: TextStyle(
                              fontFamily: 'Montserrat',
                              fontSize: 12,
                              fontWeight: FontWeight.w600,
                              color: Colors.black,
                            ),
                          ),
                          const SizedBox(width: 5),
                          ShaderMask(
                            shaderCallback: (bounds) {
                              return const LinearGradient(
                                colors: [Color(0xFFFFD700), Color(0xFFD4AF37)],
                                begin: Alignment.centerLeft,
                                end: Alignment.centerRight,
                              ).createShader(bounds);
                            },
                            child: const Icon(
                              Icons.bolt, // Boost icon
                              size: 18,
                              color: Colors.white,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),

                  // 1000 Coins Text with Golden Coin Icon
                  Row(
                    children: [
                      ShaderMask(
                        shaderCallback: (bounds) {
                          return const LinearGradient(
                            colors: [Color(0xFFFFD700), Color(0xFFD4AF37)],
                            begin: Alignment.centerLeft,
                            end: Alignment.centerRight,
                          ).createShader(bounds);
                        },
                        child: const Icon(
                          Icons.monetization_on, // Golden coin icon
                          size: 18,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(width: 5),
                      const Text(
                        "1000 coins",
                        style: TextStyle(
                          fontFamily: 'Montserrat',
                          fontSize: 12,
                          fontWeight: FontWeight.w400,
                          color: Colors.black,
                        ),
                      ),
                    ],
                  ),
                ],
              ),

              ],
                  ),
                  const SizedBox(height: 20),

                  // Section 2: My Bio and Edit Profile Button
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'My Bio',
                        style: TextStyle(
                          fontFamily: 'Montserrat',
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      // Edit Profile Button
                      Container(
                        width: 120,
                        height: 32,
                        decoration: BoxDecoration(
                          gradient: const LinearGradient(
                            colors: [Color(0xFF004DAB), Color(0xFF09163D)],
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                          ),
                          boxShadow: const [
                            BoxShadow(
                              color: Color(0x40F4FAFF),
                              offset: Offset(0, 0),
                              blurRadius: 10,
                              spreadRadius: 2,
                            ),
                          ],
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: ElevatedButton(
                          onPressed: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) =>
                                    EditProfilePage(userId: userId),
                              ),
                            );
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.transparent,
                            shadowColor: Colors.transparent,
                            padding: EdgeInsets.zero,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: const Text(
                            "Edit Profile",
                            style: TextStyle(
                              fontFamily: 'Montserrat',
                              fontSize: 12,
                              fontWeight: FontWeight.w400,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  // Bio Text
                  Text(
                    bio ?? 'No bio available.',
                    style: const TextStyle(
                      fontFamily: 'Montserrat',
                      fontSize: 14,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                  const SizedBox(height: 20),

                  // Section 3: Details
                  const Text(
                    'Details',
                    style: TextStyle(
                      fontFamily: 'Montserrat',
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 10),
                  Text("Date of Birth: $dateOfBirth"),
                  Text("Location: $location"),
                  Text("Instagram: $instagramHandle"),
                  Text("Phone: $phoneNumber"),
                  const SizedBox(height: 20),

                  // Section 4: My Posts and Edit Posts Button
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        'My Posts',
                        style: TextStyle(
                          fontFamily: 'Montserrat',
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      // Edit Posts Button
                      Container(
                        width: 120,
                        height: 32,
                        decoration: BoxDecoration(
                          gradient: const LinearGradient(
                            colors: [Color(0xFF004DAB), Color(0xFF09163D)],
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                          ),
                          boxShadow: const [
                            BoxShadow(
                              color: Color(0x40F4FAFF),
                              offset: Offset(0, 0),
                              blurRadius: 10,
                              spreadRadius: 2,
                            ),
                          ],
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: ElevatedButton(
                          onPressed: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) =>
                                const UploadImagesPage(),
                              ),
                            );
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.transparent,
                            shadowColor: Colors.transparent,
                            padding: EdgeInsets.zero,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: const Text(
                            "Edit Posts",
                            style: TextStyle(
                              fontFamily: 'Montserrat',
                              fontSize: 12,
                              fontWeight: FontWeight.w400,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  // Posts Grid
                  FutureBuilder<List<Map<String, String>>>(
                    future: _fetchUserPosts(userId),
                    builder: (context, postSnapshot) {
                      if (postSnapshot.connectionState == ConnectionState.waiting) {
                        return const CircularProgressIndicator();
                      }

                      if (postSnapshot.hasData) {
                        final posts = postSnapshot.data!; // List of Maps (URL & Type)
                        return GridView.builder(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                            crossAxisCount: 3,
                            crossAxisSpacing: 10,
                            mainAxisSpacing: 10,
                            childAspectRatio: 0.64,
                          ),
                          itemCount: posts.length,
                          itemBuilder: (context, index) {
                            final post = posts[index];
                            final url = post['url']!;
                            final type = post['type']!; // 'image' or 'video'

                            if (type == 'image') {
                              return Container(
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(8),
                                  image: DecorationImage(
                                    image: NetworkImage(url),
                                    fit: BoxFit.cover,
                                  ),
                                ),
                              );
                            } else if (type == 'video') {
                              return ClipRRect(
                                borderRadius: BorderRadius.circular(8),
                                child: VideoPlayerWidget(videoUrl: url),
                              );
                            }
                            return const SizedBox.shrink();
                          },
                        );
                      }

                      return const Text("No posts available.");
                    },
                  ),
                ],
              ),
            );
          }

          return const Center(child: Text('Failed to load profile data.'));
        },
      ),
    );
  }
}

class VideoPlayerWidget extends StatefulWidget {
  final String videoUrl;

  const VideoPlayerWidget({super.key, required this.videoUrl});

  @override
  _VideoPlayerWidgetState createState() => _VideoPlayerWidgetState();
}

class _VideoPlayerWidgetState extends State<VideoPlayerWidget> {
  late VideoPlayerController _controller;

  @override
  void initState() {
    super.initState();
    _controller = VideoPlayerController.network(widget.videoUrl)
      ..initialize().then((_) {
        setState(() {}); // Refresh UI when video is ready
      });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return _controller.value.isInitialized
        ? AspectRatio(
      aspectRatio: _controller.value.aspectRatio,
      child: Stack(
        alignment: Alignment.center,
        children: [
          VideoPlayer(_controller),
          IconButton(
            icon: Icon(
              _controller.value.isPlaying ? Icons.pause : Icons.play_arrow,
              color: Colors.white,
            ),
            onPressed: () {
              setState(() {
                _controller.value.isPlaying
                    ? _controller.pause()
                    : _controller.play();
              });
            },
          ),
        ],
      ),
    )
        : const Center(child: CircularProgressIndicator());
  }
}

